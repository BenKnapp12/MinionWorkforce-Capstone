"use strict";
var import_vitest = require("vitest");
var import_DocComment = require("./DocComment");
var import_NamedType = require("./NamedType");
var import_Property = require("./Property");
var import_stringify = require("./stringify");
var import_WellKnownSymbol = require("./WellKnownSymbol");
const A = (0, import_NamedType.namedType)("A");
(0, import_vitest.test)("name and type", () => {
  const prop = (0, import_Property.property)("foo", A);
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`"foo: A"`);
});
(0, import_vitest.test)("invalid identifier", () => {
  const prop = (0, import_Property.property)("this is not a valid JS identifier", A);
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`"["this is not a valid JS identifier"]: A"`);
});
(0, import_vitest.test)("well-known symbol", () => {
  const prop = (0, import_Property.property)(import_WellKnownSymbol.toStringTag, A);
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`"[Symbol.toStringTag]: A"`);
});
(0, import_vitest.test)("optional", () => {
  const prop = (0, import_Property.property)("foo", A).optional();
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`"foo?: A"`);
});
(0, import_vitest.test)("readonly", () => {
  const prop = (0, import_Property.property)("foo", A).readonly();
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`"readonly foo: A"`);
});
(0, import_vitest.test)("with doc comment", () => {
  const prop = (0, import_Property.property)("foo", A).setDocComment((0, import_DocComment.docComment)("This is foo"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(prop)).toMatchInlineSnapshot(`
    "/**
     * This is foo
     */
    foo: A"
  `);
});
