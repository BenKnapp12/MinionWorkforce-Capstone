"use strict";
var import_vitest = require("vitest");
var import_Class = require("./Class");
var import_GenericParameter = require("./GenericParameter");
var import_Method = require("./Method");
var import_NamedType = require("./NamedType");
var import_Property = require("./Property");
var import_stringify = require("./stringify");
const A = (0, import_NamedType.namedType)("A");
(0, import_vitest.test)("empty", () => {
  const obj = (0, import_Class.classDeclaration)("MyClass");
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class MyClass {}
    "
  `);
});
(0, import_vitest.test)("with property", () => {
  const obj = (0, import_Class.classDeclaration)("SomeClass").add((0, import_Property.property)("foo", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class SomeClass {
      foo: A
    }"
  `);
});
(0, import_vitest.test)("with method", () => {
  const obj = (0, import_Class.classDeclaration)("MyClass").add((0, import_Method.method)("doThing"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class MyClass {
      doThing(): void
    }"
  `);
});
(0, import_vitest.test)("with generic parameter", () => {
  const obj = (0, import_Class.classDeclaration)("SomeClass").addGenericParameter((0, import_GenericParameter.genericParameter)("T").extends((0, import_NamedType.namedType)("U"))).add((0, import_Property.property)("foo", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class SomeClass<T extends U> {
      foo: A
    }"
  `);
});
(0, import_vitest.test)("extending the type", () => {
  const obj = (0, import_Class.classDeclaration)("SomeClass").extends((0, import_NamedType.namedType)("Foo")).add((0, import_Property.property)("foo", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class SomeClass extends Foo {
      foo: A
    }"
  `);
});
(0, import_vitest.test)("extending multiple types", () => {
  const obj = (0, import_Class.classDeclaration)("SomeClass").extends((0, import_NamedType.namedType)("Foo")).extends((0, import_NamedType.namedType)("Bar")).add((0, import_Property.property)("foo", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(obj)).toMatchInlineSnapshot(`
    "class SomeClass extends Foo, Bar {
      foo: A
    }"
  `);
});
