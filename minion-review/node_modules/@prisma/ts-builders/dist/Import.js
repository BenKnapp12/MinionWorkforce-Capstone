"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Import_exports = {};
__export(Import_exports, {
  BindingsImport: () => BindingsImport,
  ModuleImport: () => ModuleImport,
  NamedImport: () => NamedImport,
  NamespaceImport: () => NamespaceImport,
  moduleImport: () => moduleImport,
  namedImport: () => namedImport
});
module.exports = __toCommonJS(Import_exports);
class NamespaceImport {
  constructor(alias, from) {
    this.alias = alias;
    this.from = from;
  }
  type = false;
  typeOnly() {
    this.type = true;
    return this;
  }
  write(writer) {
    writer.write("import ");
    if (this.type) {
      writer.write("type ");
    }
    writer.write("* as ").write(this.alias).write(` from "${this.from}"`);
  }
}
class BindingsImport {
  constructor(from) {
    this.from = from;
  }
  defaultImport;
  namedImports = [];
  default(name) {
    this.defaultImport = name;
    return this;
  }
  named(namedImport2) {
    if (typeof namedImport2 === "string") {
      namedImport2 = new NamedImport(namedImport2);
    }
    this.namedImports.push(namedImport2);
    return this;
  }
  write(writer) {
    writer.write("import ");
    if (this.defaultImport) {
      writer.write(this.defaultImport);
      if (this.hasNamedImports()) {
        writer.write(", ");
      }
    }
    if (this.hasNamedImports()) {
      writer.write("{ ").writeJoined(", ", this.namedImports).write(" }");
    }
    writer.write(` from "${this.from}"`);
  }
  hasNamedImports() {
    return this.namedImports.length > 0;
  }
}
class NamedImport {
  constructor(name) {
    this.name = name;
  }
  alias;
  type = false;
  as(alias) {
    this.alias = alias;
    return this;
  }
  typeOnly() {
    this.type = true;
    return this;
  }
  write(writer) {
    if (this.type) {
      writer.write("type ");
    }
    writer.write(this.name);
    if (this.alias) {
      writer.write(" as ").write(this.alias);
    }
  }
}
class ModuleImport {
  constructor(from) {
    this.from = from;
  }
  asNamespace(alias) {
    return new NamespaceImport(alias, this.from);
  }
  default(alias) {
    return new BindingsImport(this.from).default(alias);
  }
  named(namedImport2) {
    return new BindingsImport(this.from).named(namedImport2);
  }
  write(writer) {
    writer.write("import ").write(`"${this.from}"`);
  }
}
function moduleImport(from) {
  return new ModuleImport(from);
}
function namedImport(name) {
  return new NamedImport(name);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BindingsImport,
  ModuleImport,
  NamedImport,
  NamespaceImport,
  moduleImport,
  namedImport
});
