import { GenericParameter } from './GenericParameter';
import { Method } from './Method';
import { NamedType } from './NamedType';
import { Property } from './Property';
import { TypeBuilder } from './TypeBuilder';
import { Writer } from './Writer';
type ClassItem = Method | Property;
export declare class ClassDeclaration extends TypeBuilder {
    readonly name: string;
    needsParenthesisWhenIndexed: boolean;
    private items;
    private genericParameters;
    private extendedTypes;
    constructor(name: string);
    add(item: ClassItem): this;
    addMultiple(items: ClassItem[]): this;
    addGenericParameter(param: GenericParameter): this;
    extends(type: NamedType): this;
    write(writer: Writer): void;
}
export declare function classDeclaration(name: string): ClassDeclaration;
export {};
