"use strict";
var import_vitest = require("vitest");
var import_FunctionType = require("./FunctionType");
var import_GenericParameter = require("./GenericParameter");
var import_NamedType = require("./NamedType");
var import_Parameter = require("./Parameter");
var import_stringify = require("./stringify");
const A = (0, import_NamedType.namedType)("A");
const B = (0, import_NamedType.namedType)("B");
(0, import_vitest.test)("basic", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_FunctionType.functionType)())).toMatchInlineSnapshot(`"() => void"`);
});
(0, import_vitest.test)("with return type", () => {
  const func = (0, import_FunctionType.functionType)().setReturnType(A);
  (0, import_vitest.expect)((0, import_stringify.stringify)(func)).toMatchInlineSnapshot(`"() => A"`);
});
(0, import_vitest.test)("with parameter", () => {
  const func = (0, import_FunctionType.functionType)().addParameter((0, import_Parameter.parameter)("param", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(func)).toMatchInlineSnapshot(`"(param: A) => void"`);
});
(0, import_vitest.test)("with multiple parameters", () => {
  const func = (0, import_FunctionType.functionType)().addParameter((0, import_Parameter.parameter)("param1", A)).addParameter((0, import_Parameter.parameter)("param2", B));
  (0, import_vitest.expect)((0, import_stringify.stringify)(func)).toMatchInlineSnapshot(`"(param1: A, param2: B) => void"`);
});
(0, import_vitest.test)("with generic parameter", () => {
  const func = (0, import_FunctionType.functionType)().addGenericParameter((0, import_GenericParameter.genericParameter)("T"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(func)).toMatchInlineSnapshot(`"<T>() => void"`);
});
(0, import_vitest.test)("with multiple generic parameters", () => {
  const func = (0, import_FunctionType.functionType)().addGenericParameter((0, import_GenericParameter.genericParameter)("T")).addGenericParameter((0, import_GenericParameter.genericParameter)("U"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(func)).toMatchInlineSnapshot(`"<T, U>() => void"`);
});
