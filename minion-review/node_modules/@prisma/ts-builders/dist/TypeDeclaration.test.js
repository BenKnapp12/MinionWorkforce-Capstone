"use strict";
var import_vitest = require("vitest");
var import_DocComment = require("./DocComment");
var import_GenericParameter = require("./GenericParameter");
var import_NamedType = require("./NamedType");
var import_stringify = require("./stringify");
var import_TypeDeclaration = require("./TypeDeclaration");
const A = (0, import_NamedType.namedType)("A");
(0, import_vitest.test)("basic", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_TypeDeclaration.typeDeclaration)("B", A))).toMatchInlineSnapshot(`"type B = A"`);
});
(0, import_vitest.test)("with doc comment", () => {
  const decl = (0, import_TypeDeclaration.typeDeclaration)("B", A).setDocComment((0, import_DocComment.docComment)("Type for stuff"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(decl)).toMatchInlineSnapshot(`
    "/**
     * Type for stuff
     */
    type B = A"
  `);
});
(0, import_vitest.test)("with generic parameters", () => {
  const decl = (0, import_TypeDeclaration.typeDeclaration)("B", A).addGenericParameter((0, import_GenericParameter.genericParameter)("T"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(decl)).toMatchInlineSnapshot(`"type B<T> = A"`);
});
(0, import_vitest.test)("with multiple generic parameters", () => {
  const decl = (0, import_TypeDeclaration.typeDeclaration)("B", A).addGenericParameter((0, import_GenericParameter.genericParameter)("T")).addGenericParameter((0, import_GenericParameter.genericParameter)("U"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(decl)).toMatchInlineSnapshot(`"type B<T, U> = A"`);
});
