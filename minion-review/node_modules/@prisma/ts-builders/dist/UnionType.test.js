"use strict";
var import_vitest = require("vitest");
var import_ArrayType = require("./ArrayType");
var import_FunctionType = require("./FunctionType");
var import_NamedType = require("./NamedType");
var import_stringify = require("./stringify");
var import_UnionType = require("./UnionType");
const A = (0, import_NamedType.namedType)("A");
const B = (0, import_NamedType.namedType)("B");
(0, import_vitest.test)("one type", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_UnionType.unionType)(A))).toMatchInlineSnapshot(`"A"`);
});
(0, import_vitest.test)("multiple types", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_UnionType.unionType)(A).addVariant(B))).toMatchInlineSnapshot(`"A | B"`);
});
(0, import_vitest.test)("from array", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_UnionType.unionType)([A, B]))).toMatchInlineSnapshot(`"A | B"`);
});
(0, import_vitest.test)("with function type", () => {
  (0, import_vitest.expect)((0, import_stringify.stringify)((0, import_UnionType.unionType)([A, B, (0, import_FunctionType.functionType)()]))).toMatchInlineSnapshot(`"A | B | (() => void)"`);
});
(0, import_vitest.test)("fails with empty array", () => {
  (0, import_vitest.expect)(() => (0, import_UnionType.unionType)([])).toThrowErrorMatchingInlineSnapshot(`[TypeError: Union types array can not be empty]`);
});
(0, import_vitest.test)("mapVariants", () => {
  const union = (0, import_UnionType.unionType)([A, B]).mapVariants(import_ArrayType.array);
  (0, import_vitest.expect)((0, import_stringify.stringify)(union)).toMatchInlineSnapshot(`"A[] | B[]"`);
});
