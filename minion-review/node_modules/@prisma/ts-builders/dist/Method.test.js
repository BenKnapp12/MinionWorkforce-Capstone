"use strict";
var import_vitest = require("vitest");
var import_DocComment = require("./DocComment");
var import_GenericParameter = require("./GenericParameter");
var import_Method = require("./Method");
var import_NamedType = require("./NamedType");
var import_Parameter = require("./Parameter");
var import_stringify = require("./stringify");
const A = (0, import_NamedType.namedType)("A");
const B = (0, import_NamedType.namedType)("B");
(0, import_vitest.test)("name only", () => {
  const m = (0, import_Method.method)("doThings");
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings(): void"`);
});
(0, import_vitest.test)("with return type", () => {
  const m = (0, import_Method.method)("doThings").setReturnType(A);
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings(): A"`);
});
(0, import_vitest.test)("with doc comment", () => {
  const m = (0, import_Method.method)("doThings").setDocComment((0, import_DocComment.docComment)("Does things"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`
    "/**
     * Does things
     */
    doThings(): void"
  `);
});
(0, import_vitest.test)("with parameter", () => {
  const m = (0, import_Method.method)("doThings").addParameter((0, import_Parameter.parameter)("foo", A));
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings(foo: A): void"`);
});
(0, import_vitest.test)("with multiple parameters", () => {
  const m = (0, import_Method.method)("doThings").addParameter((0, import_Parameter.parameter)("foo", A)).addParameter((0, import_Parameter.parameter)("foo", B));
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings(foo: A, foo: B): void"`);
});
(0, import_vitest.test)("with generic parameter", () => {
  const m = (0, import_Method.method)("doThings").addGenericParameter((0, import_GenericParameter.genericParameter)("T"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings<T>(): void"`);
});
(0, import_vitest.test)("with multiple generic parameters", () => {
  const m = (0, import_Method.method)("doThings").addGenericParameter((0, import_GenericParameter.genericParameter)("T")).addGenericParameter((0, import_GenericParameter.genericParameter)("U"));
  (0, import_vitest.expect)((0, import_stringify.stringify)(m)).toMatchInlineSnapshot(`"doThings<T, U>(): void"`);
});
