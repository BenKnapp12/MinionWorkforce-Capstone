"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ExportFrom_exports = {};
__export(ExportFrom_exports, {
  BindingsExport: () => BindingsExport,
  ExportAllFrom: () => ExportAllFrom,
  NamedExport: () => NamedExport,
  NamespaceExport: () => NamespaceExport,
  moduleExportFrom: () => moduleExportFrom,
  namedExport: () => namedExport
});
module.exports = __toCommonJS(ExportFrom_exports);
class NamespaceExport {
  constructor(from, namespace) {
    this.from = from;
    this.namespace = namespace;
  }
  write(writer) {
    writer.write(`export * as ${this.namespace} from '${this.from}'`);
  }
}
class BindingsExport {
  constructor(from) {
    this.from = from;
  }
  namedExports = [];
  named(namedExport2) {
    if (typeof namedExport2 === "string") {
      namedExport2 = new NamedExport(namedExport2);
    }
    this.namedExports.push(namedExport2);
    return this;
  }
  write(writer) {
    writer.write("export ").write("{ ").writeJoined(", ", this.namedExports).write(" }").write(` from "${this.from}"`);
  }
}
class NamedExport {
  constructor(name) {
    this.name = name;
  }
  alias;
  type = false;
  as(alias) {
    this.alias = alias;
    return this;
  }
  typeOnly() {
    this.type = true;
    return this;
  }
  write(writer) {
    if (this.type) {
      writer.write("type ");
    }
    writer.write(this.name);
    if (this.alias) {
      writer.write(" as ").write(this.alias);
    }
  }
}
class ExportAllFrom {
  constructor(from) {
    this.from = from;
  }
  asNamespace(namespace) {
    return new NamespaceExport(this.from, namespace);
  }
  named(binding) {
    return new BindingsExport(this.from).named(binding);
  }
  write(writer) {
    writer.write(`export * from "${this.from}"`);
  }
}
function moduleExportFrom(from) {
  return new ExportAllFrom(from);
}
function namedExport(name) {
  return new NamedExport(name);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BindingsExport,
  ExportAllFrom,
  NamedExport,
  NamespaceExport,
  moduleExportFrom,
  namedExport
});
