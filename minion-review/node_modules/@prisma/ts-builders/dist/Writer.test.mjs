import { expect, test } from "vitest";
import { Writer } from "./Writer";
test("write string", () => {
  const writer = new Writer(0, void 0);
  writer.write("A").write("B").write("C");
  expect(writer.toString()).toBe("ABC");
});
test("write builder", () => {
  const builder = {
    write(writer2) {
      writer2.write("hello from builder");
    }
  };
  const writer = new Writer(0, void 0);
  writer.write(builder);
  expect(writer.toString()).toBe("hello from builder");
});
test("newLine", () => {
  const writer = new Writer(0, void 0);
  writer.newLine();
  expect(writer.toString()).toBe("\n");
});
test("writeLine", () => {
  const writer = new Writer(0, void 0);
  writer.writeLine("A").writeLine("B").writeLine("C");
  expect(writer.toString()).toBe("A\nB\nC\n");
});
test("writeJoined with strings", () => {
  const writer = new Writer(0, void 0);
  writer.writeJoined(", ", ["A", "B", "C"]);
  expect(writer.toString()).toBe("A, B, C");
});
test("writeJoined with builder values", () => {
  const writer = new Writer(0, void 0);
  const builder = {
    write(writer2) {
      writer2.write("builder");
    }
  };
  writer.writeJoined(", ", [builder, builder, builder]);
  expect(writer.toString()).toBe("builder, builder, builder");
});
test("writeJoined with builder separator", () => {
  const writer = new Writer(0, void 0);
  const separator = {
    write(writer2) {
      writer2.write("|");
    }
  };
  writer.writeJoined(separator, ["A", "B", "C"]);
  expect(writer.toString()).toBe("A|B|C");
});
test("writeJoined empty", () => {
  const writer = new Writer(0, void 0);
  writer.writeJoined(", ", []);
  expect(writer.toString()).toBe("");
});
test("indent", () => {
  const writer = new Writer(0, void 0);
  writer.indent().write("A");
  expect(writer.toString()).toBe("  A");
});
test("indent + unindent", () => {
  const writer = new Writer(0, void 0);
  writer.writeLine("A").indent().writeLine("B").unindent().writeLine("C");
  expect(writer.toString()).toBe("A\n  B\nC\n");
});
test("unindent beyond 0", () => {
  const writer = new Writer(0, void 0);
  writer.unindent().unindent().write("A");
  expect(writer.toString()).toBe("A");
});
test("withIndent", () => {
  const writer = new Writer(0, void 0);
  writer.writeLine("A").withIndent(() => writer.writeLine("B")).writeLine("C");
  expect(writer.toString()).toBe("A\n  B\nC\n");
});
test("after next newline callback", () => {
  const writer = new Writer(0, void 0);
  writer.afterNextNewline(() => {
    writer.writeLine("---");
  });
  writer.writeLine("foo");
  writer.writeLine("bar");
  expect(writer.toString()).toBe("foo\n---\nbar\n");
});
test("margin symbol", () => {
  const writer = new Writer(0, void 0);
  writer.writeLine("{").withIndent(() => {
    writer.addMarginSymbol("+").writeLine("foo").writeLine("bar");
  }).writeLine("}");
  expect(writer.toString()).toMatchInlineSnapshot(`
    "{
    + foo
      bar
    }
    "
  `);
});
