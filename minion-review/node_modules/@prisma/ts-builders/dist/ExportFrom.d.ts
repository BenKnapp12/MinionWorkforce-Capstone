import { BasicBuilder } from './BasicBuilder';
import { Writer } from './Writer';
export type ExportFrom = NamespaceExport | BindingsExport | ExportAllFrom;
export declare class NamespaceExport implements BasicBuilder {
    private from;
    private namespace;
    constructor(from: string, namespace: string);
    write(writer: Writer<undefined>): void;
}
export declare class BindingsExport implements BasicBuilder {
    private from;
    private namedExports;
    constructor(from: string);
    named(namedExport: string | NamedExport): this;
    write(writer: Writer<undefined>): void;
}
export declare class NamedExport implements BasicBuilder {
    readonly name: string;
    private alias;
    private type;
    constructor(name: string);
    as(alias: string): this;
    typeOnly(): this;
    write(writer: Writer): void;
}
export declare class ExportAllFrom implements BasicBuilder {
    private from;
    constructor(from: string);
    asNamespace(namespace: string): NamespaceExport;
    named(binding: string | NamedExport): BindingsExport;
    write(writer: Writer): void;
}
export declare function moduleExportFrom(from: string): ExportAllFrom;
export declare function namedExport(name: string): NamedExport;
