import { TypeBuilder } from './TypeBuilder';
import { Writer } from './Writer';
export declare class UnionType<VariantType extends TypeBuilder = TypeBuilder> extends TypeBuilder {
    needsParenthesisWhenIndexed: boolean;
    needsParenthesisInKeyof: boolean;
    needsParenthesisInIntersection: boolean;
    readonly variants: VariantType[];
    constructor(firstType: VariantType);
    addVariant(variant: VariantType): this;
    addVariants(variants: VariantType[]): this;
    write(writer: Writer): void;
    mapVariants<NewVariantType extends TypeBuilder>(callback: (type: VariantType) => NewVariantType): UnionType<NewVariantType>;
}
export declare function unionType<VariantType extends TypeBuilder = TypeBuilder>(types: VariantType[] | VariantType): UnionType<VariantType>;
