import { TypeBuilder } from "./TypeBuilder";
class TupleItem {
  constructor(type) {
    this.type = type;
  }
  name;
  setName(name) {
    this.name = name;
    return this;
  }
  write(writer) {
    if (this.name) {
      writer.write(this.name).write(": ");
    }
    writer.write(this.type);
  }
}
class TupleType extends TypeBuilder {
  items = [];
  add(item) {
    if (item instanceof TypeBuilder) {
      item = new TupleItem(item);
    }
    this.items.push(item);
    return this;
  }
  write(writer) {
    writer.write("[").writeJoined(", ", this.items).write("]");
  }
}
function tupleType() {
  return new TupleType();
}
function tupleItem(type) {
  return new TupleItem(type);
}
export {
  TupleItem,
  TupleType,
  tupleItem,
  tupleType
};
