"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ConditionalType_exports = {};
__export(ConditionalType_exports, {
  ConditionalType: () => ConditionalType,
  conditionalType: () => conditionalType
});
module.exports = __toCommonJS(ConditionalType_exports);
var import_TypeBuilder = require("./TypeBuilder");
class ConditionalType extends import_TypeBuilder.TypeBuilder {
  needsParenthesisInUnion = true;
  needsParenthesisInIntersection = true;
  #checkType;
  #extendsType;
  #trueType;
  #falseType;
  constructor(checkType, extendsType, trueType, falseType) {
    super();
    this.#checkType = checkType;
    this.#extendsType = extendsType;
    this.#trueType = trueType;
    this.#falseType = falseType;
  }
  write(writer) {
    writer.write(this.#checkType);
    writer.write(" extends ");
    writer.write(this.#extendsType);
    writer.write(" ? ");
    writer.write(this.#trueType);
    writer.write(" : ");
    writer.write(this.#falseType);
  }
}
class ConditionalTypeBuilder {
  check(checkType) {
    return new ConditionalTypeBuilderWithCheckType(checkType);
  }
}
class ConditionalTypeBuilderWithCheckType {
  #checkType;
  constructor(checkType) {
    this.#checkType = checkType;
  }
  extends(extendsType) {
    return new ConditionalTypeBuilderWithExtendsType(this.#checkType, extendsType);
  }
}
class ConditionalTypeBuilderWithExtendsType {
  #checkType;
  #extendsType;
  constructor(checkType, extendsType) {
    this.#checkType = checkType;
    this.#extendsType = extendsType;
  }
  then(trueType) {
    return new ConditionalTypeBuilderWithTrueType(this.#checkType, this.#extendsType, trueType);
  }
}
class ConditionalTypeBuilderWithTrueType {
  #checkType;
  #extendsType;
  #trueType;
  constructor(checkType, extendsType, trueType) {
    this.#checkType = checkType;
    this.#extendsType = extendsType;
    this.#trueType = trueType;
  }
  else(falseType) {
    return new ConditionalType(this.#checkType, this.#extendsType, this.#trueType, falseType);
  }
}
function conditionalType() {
  return new ConditionalTypeBuilder();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConditionalType,
  conditionalType
});
