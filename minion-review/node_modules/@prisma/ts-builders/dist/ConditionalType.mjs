import { TypeBuilder } from "./TypeBuilder";
class ConditionalType extends TypeBuilder {
  needsParenthesisInUnion = true;
  needsParenthesisInIntersection = true;
  #checkType;
  #extendsType;
  #trueType;
  #falseType;
  constructor(checkType, extendsType, trueType, falseType) {
    super();
    this.#checkType = checkType;
    this.#extendsType = extendsType;
    this.#trueType = trueType;
    this.#falseType = falseType;
  }
  write(writer) {
    writer.write(this.#checkType);
    writer.write(" extends ");
    writer.write(this.#extendsType);
    writer.write(" ? ");
    writer.write(this.#trueType);
    writer.write(" : ");
    writer.write(this.#falseType);
  }
}
class ConditionalTypeBuilder {
  check(checkType) {
    return new ConditionalTypeBuilderWithCheckType(checkType);
  }
}
class ConditionalTypeBuilderWithCheckType {
  #checkType;
  constructor(checkType) {
    this.#checkType = checkType;
  }
  extends(extendsType) {
    return new ConditionalTypeBuilderWithExtendsType(this.#checkType, extendsType);
  }
}
class ConditionalTypeBuilderWithExtendsType {
  #checkType;
  #extendsType;
  constructor(checkType, extendsType) {
    this.#checkType = checkType;
    this.#extendsType = extendsType;
  }
  then(trueType) {
    return new ConditionalTypeBuilderWithTrueType(this.#checkType, this.#extendsType, trueType);
  }
}
class ConditionalTypeBuilderWithTrueType {
  #checkType;
  #extendsType;
  #trueType;
  constructor(checkType, extendsType, trueType) {
    this.#checkType = checkType;
    this.#extendsType = extendsType;
    this.#trueType = trueType;
  }
  else(falseType) {
    return new ConditionalType(this.#checkType, this.#extendsType, this.#trueType, falseType);
  }
}
function conditionalType() {
  return new ConditionalTypeBuilder();
}
export {
  ConditionalType,
  conditionalType
};
