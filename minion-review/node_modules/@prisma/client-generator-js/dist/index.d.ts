import type { ActiveConnectorType } from '@prisma/generator';
import type { BinaryPaths } from '@prisma/generator';
import type { DataSource } from '@prisma/generator';
import * as DMMF from '@prisma/dmmf';
import { EnvPaths } from '@prisma/internals';
import { Generator as Generator_2 } from '@prisma/generator';
import { GeneratorConfig } from '@prisma/generator';
import { GeneratorManifest } from '@prisma/generator';
import { GeneratorOptions } from '@prisma/generator';
import type { GetDMMFOptions } from '@prisma/internals';
import type { SqlQueryOutput } from '@prisma/generator';

/**
 * @internal
 * @remarks Used by, for example, the PDP to avoid child process calls to the CLI.
 */
export declare function dmmfToTypes(dmmf: DMMF.Document): string;

/**
 * Turns type: string into type: string[] for all args in order to support union input types
 * @param document
 */
export declare function externalToInternalDmmf(document: DMMF.Document): DMMF.Document;

export declare function generateClient(options: GenerateClientOptions): Promise<void>;

export declare interface GenerateClientOptions {
    datamodel: string;
    schemaPath: string;
    /** Runtime path used in runtime/type imports */
    runtimeBase?: string;
    outputDir: string;
    generator: GeneratorConfig;
    dmmf: DMMF.Document;
    datasources: DataSource[];
    binaryPaths: BinaryPaths;
    testMode?: boolean;
    copyRuntime?: boolean;
    copyRuntimeSourceMaps?: boolean;
    runtimeSourcePath: string;
    engineVersion: string;
    clientVersion: string;
    activeProvider: ActiveConnectorType;
    envPaths?: EnvPaths;
    /** When --postinstall is passed via CLI */
    postinstall?: boolean;
    /** When --no-engine is passed via CLI */
    copyEngine?: boolean;
    typedSql?: SqlQueryOutput[];
}

export declare function getDMMF(options: GetDMMFOptions): Promise<DMMF.Document>;

export declare class PrismaClientJsGenerator implements Generator_2 {
    #private;
    readonly name = "prisma-client-js";
    constructor({ shouldResolvePrismaClient, shouldInstallMissingPackages, runtimePath, }?: PrismaClientJsGeneratorOptions);
    getManifest(config: GeneratorConfig): Promise<GeneratorManifest>;
    generate(options: GeneratorOptions): Promise<void>;
}

declare type PrismaClientJsGeneratorOptions = {
    shouldResolvePrismaClient?: boolean;
    shouldInstallMissingPackages?: boolean;
    runtimePath?: string;
};

export { }
