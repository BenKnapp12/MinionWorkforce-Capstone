import { EnvPaths } from '@prisma/internals';
import type { O } from 'ts-toolbelt';
import { DMMFHelper } from '../dmmf';
import { GenerateClientOptions } from '../generateClient';
import { GenericArgsInfo } from '../GenericsArgsInfo';
import { type Generable } from './Generable';
type RuntimeName = 'binary' | 'library' | 'wasm-engine-edge' | 'wasm-compiler-edge' | 'edge' | 'edge-esm' | 'index-browser' | 'react-native' | 'client' | (string & {});
export type TSClientOptions = O.Required<GenerateClientOptions, 'runtimeBase'> & {
    /** More granular way to define JS runtime name */
    runtimeNameJs: RuntimeName;
    /** More granular way to define TS runtime name */
    runtimeNameTs: RuntimeName;
    /** When generating the browser client */
    browser: boolean;
    /** When we are generating an /edge client */
    edge: boolean;
    /** When we are generating a /wasm client */
    wasm: boolean;
    /** When types don't need to be regenerated */
    reusedTs?: string;
    /** When js doesn't need to be regenerated */
    reusedJs?: string;
    /** result of getEnvPaths call */
    envPaths: EnvPaths;
};
export declare class TSClient implements Generable {
    protected readonly options: TSClientOptions;
    protected readonly dmmf: DMMFHelper;
    protected readonly genericsInfo: GenericArgsInfo;
    constructor(options: TSClientOptions);
    toJS(): string;
    toTS(): string;
    toBrowserJS(): string;
}
export {};
