import type * as DMMF from '@prisma/dmmf';
import * as ts from '@prisma/ts-builders';
import { GenerateContext } from './GenerateContext';
type BuildIncludeTypeParams = {
    typeName?: string;
    modelName: string;
    context: GenerateContext;
    fields: readonly DMMF.SchemaField[];
};
export declare function buildIncludeType({ modelName, typeName, context, fields, }: BuildIncludeTypeParams): ts.Export<ts.TypeDeclaration<ts.TypeBuilder>>;
type BuildOmitTypeParams = {
    modelName: string;
    context: GenerateContext;
    fields: readonly DMMF.SchemaField[];
};
export declare function buildOmitType({ modelName, fields, context }: BuildOmitTypeParams): ts.Export<ts.TypeDeclaration<ts.TypeBuilder>>;
type BuildSelectTypeParams = {
    modelName: string;
    fields: readonly DMMF.SchemaField[];
    context: GenerateContext;
    typeName?: string;
};
export declare function buildSelectType({ modelName, typeName, fields, context, }: BuildSelectTypeParams): ts.Export<ts.TypeDeclaration<ts.TypeBuilder>>;
export declare function buildScalarSelectType({ modelName, fields, context }: BuildSelectTypeParams): ts.Export<ts.TypeDeclaration<ts.ObjectType>>;
export {};
