import * as DMMF from '@prisma/dmmf';
import * as ts from '@prisma/ts-builders';
import { GenerateContext } from './GenerateContext';
export declare class ArgsTypeBuilder {
    private readonly type;
    private readonly context;
    private readonly action?;
    private moduleExport;
    private hasDefaultName;
    constructor(type: DMMF.OutputType, context: GenerateContext, action?: DMMF.ModelAction | undefined);
    private addProperty;
    addSchemaArgs(args: readonly DMMF.SchemaArg[]): this;
    addSelectArg(selectTypeName?: string): this;
    addIncludeArgIfHasRelations(includeTypeName?: string, type?: import("@prisma/dmmf/dist/util").ReadonlyDeep<{
        name: string;
        fields: import("@prisma/dmmf/dist/util").ReadonlyDeep<{
            name: string;
            isNullable?: boolean | undefined;
            outputType: DMMF.OutputTypeRef;
            args: import("@prisma/dmmf/dist/util").ReadonlyDeep<{
                name: string;
                comment?: string | undefined;
                isNullable: boolean;
                isRequired: boolean;
                inputTypes: DMMF.InputTypeRef[];
                requiresOtherFields?: string[] | undefined;
                deprecation?: import("@prisma/dmmf/dist/util").ReadonlyDeep<{
                    sinceVersion: string;
                    reason: string;
                    plannedRemovalVersion?: string | undefined;
                }> | undefined;
            }>[];
            deprecation?: import("@prisma/dmmf/dist/util").ReadonlyDeep<{
                sinceVersion: string;
                reason: string;
                plannedRemovalVersion?: string | undefined;
            }> | undefined;
            documentation?: string | undefined;
        }>[];
    }>): this;
    addOmitArg(): this;
    setGeneratedName(name: string): this;
    setComment(comment: string): this;
    createExport(): ts.Export<ts.TypeDeclaration<ts.ObjectType>>;
}
