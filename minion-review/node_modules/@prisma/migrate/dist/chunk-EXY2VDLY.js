"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_EXY2VDLY_exports = {};
__export(chunk_EXY2VDLY_exports, {
  aiAgentConfirmationCheckpoint: () => aiAgentConfirmationCheckpoint
});
module.exports = __toCommonJS(chunk_EXY2VDLY_exports);
var import_debug = __toESM(require("@prisma/debug"));
var debug = (0, import_debug.default)("prisma:migrate:ai-safety");
var userConsentEnvVar = "PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION";
var aiAgentErrorPrompt = (agentName) => `Prisma Migrate detected that it was invoked by ${agentName}.

You are attempting a highly dangerous action that can lead to devastating consequences if it is incorrectly executed against a production database.

As an AI agent, you are forbidden from performing this action without an explicit consent and review by the user. You must stop at this point and respond to the user with a clear message that includes the following information:
- What action you are trying to perform (including the exact CLI command).
- Your motivation and reasoning for perfoming this action.
- Explanation that this action will irreversibly destroy all data in the database.
- Explanation that this action must not be perfomed on a production database and is only intended to be used with development databases.

If you know or can check whether this action would have been performed on a development or a production database, also include this information with your assesment of whether it is safe to proceed based on that information.

You must ask the user if they want to proceed with this action. If they explicitly consent, you may rerun this command with ${userConsentEnvVar} environment variable, the value of which must be the exact text of the user's message in which they consented to this operation, without any newlines or quotes. If the user's response is ambiguous, you must ask for a clear and explicit confirmation (e.g., "yes") before proceeding. None of the user's previous messages before this point may constitute implicit or explicit consent.`;
function aiAgentConfirmationCheckpoint() {
  const aiAgent = detectAiAgent();
  if (!aiAgent) {
    return;
  }
  if (process.env[userConsentEnvVar]) {
    debug("AI agent asserts that user consented to dangerous action");
    return;
  }
  throw new Error(aiAgentErrorPrompt(aiAgent));
}
function detectAiAgent() {
  const agentMarkers = {
    "Claude Code": process.env.CLAUDECODE,
    "Gemini CLI or Qwen Code": process.env.GEMINI_CLI,
    Cursor: process.env.CURSOR_AGENT,
    Aider: process.env.OR_APP_NAME === "Aider",
    Replit: process.env.REPLIT_CLI
  };
  for (const [agentName, marker] of Object.entries(agentMarkers)) {
    if (marker) {
      debug("Detected %s", agentName);
      return agentName;
    }
  }
  return void 0;
}
