"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_CXSHCKU6_exports = {};
__export(chunk_CXSHCKU6_exports, {
  DbDrop: () => DbDrop
});
module.exports = __toCommonJS(chunk_CXSHCKU6_exports);
var import_chunk_IHDN3L3R = require("./chunk-IHDN3L3R.js");
var import_chunk_EXY2VDLY = require("./chunk-EXY2VDLY.js");
var import_chunk_3WC4XD74 = require("./chunk-3WC4XD74.js");
var import_chunk_2FXU5NZQ = require("./chunk-2FXU5NZQ.js");
var import_chunk_74LUB4XX = require("./chunk-74LUB4XX.js");
var import_chunk_SKRR5WT4 = require("./chunk-SKRR5WT4.js");
var import_internals = require("@prisma/internals");
var import_prompts = __toESM(require("prompts"));
var DbDrop = class _DbDrop {
  static new() {
    return new _DbDrop();
  }
  static help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : "\u{1F4A3}  "}Drop the database

${(0, import_chunk_SKRR5WT4.bold)((0, import_chunk_SKRR5WT4.yellow)("WARNING"))} ${(0, import_chunk_SKRR5WT4.bold)(
    `Prisma db drop is currently in Preview (${(0, import_internals.link)("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`
  )}
${(0, import_chunk_SKRR5WT4.dim)("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${(0, import_chunk_SKRR5WT4.bold)("Usage")}

  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma db drop [options] --preview-feature

${(0, import_chunk_SKRR5WT4.bold)("Options")}

   -h, --help   Display this help message
     --config   Custom path to your Prisma config file
     --schema   Custom path to your Prisma schema
  -f, --force   Skip the confirmation prompt

${(0, import_chunk_SKRR5WT4.bold)("Examples")}

  Drop the database
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma db drop --preview-feature

  Specify a schema
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma db drop --preview-feature --schema=./schema.prisma

  Use --force to skip the confirmation prompt
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma db drop --preview-feature --force
`);
  async parse(argv, config) {
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--force": Boolean,
      "-f": "--force",
      "--schema": String,
      "--config": String,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (!args["--preview-feature"]) {
      throw new import_chunk_IHDN3L3R.PreviewFlagError();
    }
    await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true, config });
    const schemaContext = await (0, import_internals.loadSchemaContext)({
      schemaPathFromArg: args["--schema"],
      schemaPathFromConfig: config.schema
    });
    (0, import_internals.checkUnsupportedDataProxy)({ cmd: "db drop", schemaContext });
    const datasourceInfo = (0, import_chunk_74LUB4XX.parseDatasourceInfo)(schemaContext.primaryDatasource);
    (0, import_chunk_2FXU5NZQ.printDatasource)({ datasourceInfo });
    process.stdout.write("\n");
    if (!args["--force"]) {
      if (!(0, import_internals.canPrompt)()) {
        throw new import_chunk_3WC4XD74.DbDropNeedsForceError("drop");
      }
      const confirmation = await (0, import_prompts.default)({
        type: "text",
        name: "value",
        message: `Enter the ${datasourceInfo.prettyProvider} database name "${datasourceInfo.dbName}" to drop it.
Location: "${datasourceInfo.dbLocation}".
${(0, import_chunk_SKRR5WT4.red)("All data will be lost")}.`
      });
      process.stdout.write("\n");
      if (!confirmation.value) {
        process.stdout.write("Drop cancelled.\n");
        process.exit(130);
      } else if (confirmation.value !== datasourceInfo.dbName) {
        throw Error(`The database name entered "${confirmation.value}" doesn't match "${datasourceInfo.dbName}".`);
      }
    }
    (0, import_chunk_EXY2VDLY.aiAgentConfirmationCheckpoint)();
    if (await (0, import_internals.dropDatabase)(datasourceInfo.url, datasourceInfo.configDir)) {
      return `${process.platform === "win32" ? "" : "\u{1F680}  "}The ${datasourceInfo.prettyProvider} database "${datasourceInfo.dbName}" from "${datasourceInfo.dbLocation}" was successfully dropped.
`;
    } else {
      return "";
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${(0, import_chunk_SKRR5WT4.bold)((0, import_chunk_SKRR5WT4.red)(`!`))} ${error}
${_DbDrop.help}`);
    }
    return _DbDrop.help;
  }
};
