"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_GGA2F64G_exports = {};
__export(chunk_GGA2F64G_exports, {
  listMigrations: () => listMigrations
});
module.exports = __toCommonJS(chunk_GGA2F64G_exports);
var import_promises = __toESM(require("node:fs/promises"));
var import_node_path = __toESM(require("node:path"));
async function listMigrations(migrationsDirectoryPath, shadowDbInitScript) {
  const baseDir = migrationsDirectoryPath;
  const lockfileName = "migration_lock.toml";
  const lockfileContent = await import_promises.default.readFile(import_node_path.default.join(migrationsDirectoryPath, lockfileName), { encoding: "utf-8" }).catch(() => null);
  const lockfile = {
    path: lockfileName,
    content: lockfileContent
  };
  let entries = [];
  try {
    entries = await import_promises.default.readdir(migrationsDirectoryPath, { withFileTypes: true, recursive: false }).catch((_) => []);
  } catch (error) {
    if (error.code === "ENOENT") {
      return {
        baseDir,
        lockfile,
        migrationDirectories: [],
        shadowDbInitScript
      };
    }
    throw error;
  }
  const migrationDirectories = [];
  for (const entry of entries.filter((entry2) => entry2.isDirectory())) {
    const migrationPath = import_node_path.default.join(baseDir, entry.name);
    const migrationFileName = "migration.sql";
    const migrationFileContent = await import_promises.default.readFile(import_node_path.default.join(migrationPath, migrationFileName), { encoding: "utf-8" }).then((content) => ({ tag: "ok", value: content })).catch((error) => ({ tag: "error", value: error.message }));
    migrationDirectories.push({
      path: entry.name,
      migrationFile: {
        path: migrationFileName,
        content: migrationFileContent
      }
    });
  }
  const sortedMigrations = migrationDirectories.sort((a, b) => a.path.localeCompare(b.path));
  return {
    baseDir,
    lockfile,
    migrationDirectories: sortedMigrations,
    shadowDbInitScript
  };
}
