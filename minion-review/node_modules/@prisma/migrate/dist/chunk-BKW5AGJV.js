"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_BKW5AGJV_exports = {};
__export(chunk_BKW5AGJV_exports, {
  MigrateDeploy: () => MigrateDeploy
});
module.exports = __toCommonJS(chunk_BKW5AGJV_exports);
var import_chunk_KRQEFTDT = require("./chunk-KRQEFTDT.js");
var import_chunk_2FXU5NZQ = require("./chunk-2FXU5NZQ.js");
var import_chunk_74LUB4XX = require("./chunk-74LUB4XX.js");
var import_chunk_F3JIZWIS = require("./chunk-F3JIZWIS.js");
var import_chunk_SKRR5WT4 = require("./chunk-SKRR5WT4.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var debug = (0, import_debug.default)("prisma:migrate:deploy");
var MigrateDeploy = class _MigrateDeploy {
  static new() {
    return new _MigrateDeploy();
  }
  static help = (0, import_internals.format)(`
Apply pending migrations to update the database schema in production/staging

${(0, import_chunk_SKRR5WT4.bold)("Usage")}

  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate deploy [options]

${(0, import_chunk_SKRR5WT4.bold)("Options")}

  -h, --help   Display this help message
    --config   Custom path to your Prisma config file
    --schema   Custom path to your Prisma schema

${(0, import_chunk_SKRR5WT4.bold)("Examples")}

  Deploy your pending migrations to your production/staging database
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate deploy

  Specify a schema
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate deploy --schema=./schema.prisma

`);
  async parse(argv, config) {
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--schema": String,
        "--config": String,
        "--telemetry-information": String
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true, config });
    const schemaContext = await (0, import_internals.loadSchemaContext)({
      schemaPathFromArg: args["--schema"],
      schemaPathFromConfig: config.schema
    });
    const { migrationsDirPath } = (0, import_internals.inferDirectoryConfig)(schemaContext, config);
    (0, import_internals.checkUnsupportedDataProxy)({ cmd: "migrate deploy", schemaContext });
    const adapter = await config.adapter?.();
    (0, import_chunk_2FXU5NZQ.printDatasource)({ datasourceInfo: (0, import_chunk_74LUB4XX.parseDatasourceInfo)(schemaContext.primaryDatasource), adapter });
    const schemaFilter = {
      externalTables: config.tables?.external ?? [],
      externalEnums: config.enums?.external ?? []
    };
    const migrate = await import_chunk_F3JIZWIS.Migrate.setup({ adapter, migrationsDirPath, schemaContext, schemaFilter });
    if (!adapter) {
      try {
        const wasDbCreated = await (0, import_chunk_74LUB4XX.ensureDatabaseExists)(schemaContext.primaryDatasource);
        if (wasDbCreated) {
          process.stdout.write("\n" + wasDbCreated + "\n");
        }
      } catch (e) {
        process.stdout.write("\n");
        throw e;
      }
    }
    const listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
    debug({ listMigrationDirectoriesResult });
    process.stdout.write("\n");
    if (listMigrationDirectoriesResult.migrations.length > 0) {
      const migrations = listMigrationDirectoriesResult.migrations;
      process.stdout.write(
        `${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations
`
      );
    } else {
      process.stdout.write(`No migration found in prisma/migrations
`);
    }
    let migrationIds;
    try {
      process.stdout.write("\n");
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      await migrate.stop();
    }
    process.stdout.write("\n");
    if (migrationIds.length === 0) {
      return (0, import_chunk_SKRR5WT4.green)(`No pending migrations to apply.`);
    } else {
      return `The following migration(s) have been applied:

${(0, import_chunk_KRQEFTDT.printFilesFromMigrationIds)(
        "migrations",
        migrationIds,
        {
          "migration.sql": ""
        }
      )}
      
${(0, import_chunk_SKRR5WT4.green)("All migrations have been successfully applied.")}`;
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${(0, import_chunk_SKRR5WT4.bold)((0, import_chunk_SKRR5WT4.red)(`!`))} ${error}
${_MigrateDeploy.help}`);
    }
    return _MigrateDeploy.help;
  }
};
