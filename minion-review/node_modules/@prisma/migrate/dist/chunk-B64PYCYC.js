"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_B64PYCYC_exports = {};
__export(chunk_B64PYCYC_exports, {
  MigrateReset: () => MigrateReset
});
module.exports = __toCommonJS(chunk_B64PYCYC_exports);
var import_chunk_EXY2VDLY = require("./chunk-EXY2VDLY.js");
var import_chunk_3WC4XD74 = require("./chunk-3WC4XD74.js");
var import_chunk_HFXUQT52 = require("./chunk-HFXUQT52.js");
var import_chunk_KRQEFTDT = require("./chunk-KRQEFTDT.js");
var import_chunk_2FXU5NZQ = require("./chunk-2FXU5NZQ.js");
var import_chunk_74LUB4XX = require("./chunk-74LUB4XX.js");
var import_chunk_F3JIZWIS = require("./chunk-F3JIZWIS.js");
var import_chunk_SKRR5WT4 = require("./chunk-SKRR5WT4.js");
var import_internals = require("@prisma/internals");
var import_prompts = __toESM(require("prompts"));
var MigrateReset = class _MigrateReset {
  static new() {
    return new _MigrateReset();
  }
  static help = (0, import_internals.format)(`
Reset your database and apply all migrations, all data will be lost

${(0, import_chunk_SKRR5WT4.bold)("Usage")}

  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate reset [options]

${(0, import_chunk_SKRR5WT4.bold)("Options")}

       -h, --help   Display this help message
         --config   Custom path to your Prisma config file
         --schema   Custom path to your Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed
      -f, --force   Skip the confirmation prompt

${(0, import_chunk_SKRR5WT4.bold)("Examples")}

  Reset your database and apply all migrations, all data will be lost
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate reset

  Specify a schema
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate reset --schema=./schema.prisma

  Use --force to skip the confirmation prompt
  ${(0, import_chunk_SKRR5WT4.dim)("$")} prisma migrate reset --force
  `);
  async parse(argv, config) {
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--force": Boolean,
      "-f": "--force",
      "--skip-generate": Boolean,
      "--skip-seed": Boolean,
      "--schema": String,
      "--config": String,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true, config });
    const schemaContext = await (0, import_internals.loadSchemaContext)({
      schemaPathFromArg: args["--schema"],
      schemaPathFromConfig: config.schema
    });
    const { migrationsDirPath } = (0, import_internals.inferDirectoryConfig)(schemaContext, config);
    const datasourceInfo = (0, import_chunk_74LUB4XX.parseDatasourceInfo)(schemaContext.primaryDatasource);
    const adapter = await config.adapter?.();
    (0, import_chunk_2FXU5NZQ.printDatasource)({ datasourceInfo, adapter });
    (0, import_internals.checkUnsupportedDataProxy)({ cmd: "migrate reset", schemaContext });
    if (!adapter) {
      const wasDbCreated = await (0, import_chunk_74LUB4XX.ensureDatabaseExists)(schemaContext.primaryDatasource);
      if (wasDbCreated) {
        process.stdout.write("\n" + wasDbCreated + "\n");
      }
    }
    process.stdout.write("\n");
    if (!args["--force"]) {
      if (!(0, import_internals.canPrompt)()) {
        throw new import_chunk_3WC4XD74.MigrateResetEnvNonInteractiveError();
      }
      const confirmation = await (0, import_prompts.default)({
        type: "confirm",
        name: "value",
        message: `Are you sure you want to reset your database? ${(0, import_chunk_SKRR5WT4.red)("All data will be lost")}.`
      });
      process.stdout.write("\n");
      if (!confirmation.value) {
        process.stdout.write("Reset cancelled.\n");
        process.exit(130);
      }
    }
    (0, import_chunk_EXY2VDLY.aiAgentConfirmationCheckpoint)();
    const schemaFilter = {
      externalTables: config.tables?.external ?? [],
      externalEnums: config.enums?.external ?? []
    };
    const migrate = await import_chunk_F3JIZWIS.Migrate.setup({ adapter, migrationsDirPath, schemaContext, schemaFilter });
    let migrationIds;
    try {
      await migrate.reset();
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      await migrate.stop();
    }
    if (migrationIds.length === 0) {
      process.stdout.write(`${(0, import_chunk_SKRR5WT4.green)("Database reset successful\n")}
`);
    } else {
      process.stdout.write("\n");
      process.stdout.write(
        `${(0, import_chunk_SKRR5WT4.green)("Database reset successful")}

The following migration(s) have been applied:

${(0, import_chunk_KRQEFTDT.printFilesFromMigrationIds)("migrations", migrationIds, {
          "migration.sql": ""
        })}
`
      );
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
      await migrate.tryToRunGenerate(datasourceInfo);
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
      const seedCommandFromPrismaConfig = config.migrations?.seed;
      const seedCommandFromPkgJson = await (0, import_chunk_HFXUQT52.getSeedCommandFromPackageJson)(process.cwd());
      const seedCommand = seedCommandFromPrismaConfig ?? seedCommandFromPkgJson;
      if (seedCommand) {
        process.stdout.write("\n");
        const successfulSeeding = await (0, import_chunk_HFXUQT52.executeSeedCommand)({ commandFromConfig: seedCommand });
        if (successfulSeeding) {
          process.stdout.write(`
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.
`);
        } else {
          process.exit(1);
        }
      }
    }
    return ``;
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${(0, import_chunk_SKRR5WT4.bold)((0, import_chunk_SKRR5WT4.red)(`!`))} ${error}
${_MigrateReset.help}`);
    }
    return _MigrateReset.help;
  }
};
