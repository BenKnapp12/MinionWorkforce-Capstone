"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_PCTCQIOH_exports = {};
__export(chunk_PCTCQIOH_exports, {
  warnDatasourceDriverAdapter: () => warnDatasourceDriverAdapter
});
module.exports = __toCommonJS(chunk_PCTCQIOH_exports);
var DEPRECATED_PROPERTIES = ["url", "directUrl", "shadowDatabaseUrl"];
var NO_URL_PLACEHOLDER = "<invalid>";
function warnDatasourceDriverAdapter(schemaContext, adapter) {
  if (!schemaContext || !adapter) return;
  const foundProperties = [];
  for (const property of DEPRECATED_PROPERTIES) {
    if (schemaContext.primaryDatasource?.[property] && schemaContext.primaryDatasource?.[property].value !== NO_URL_PLACEHOLDER) {
      foundProperties.push(property);
    }
  }
  if (foundProperties.length > 0) {
    process.stdout.write(
      `
WARNING: Your schema specifies the following datasource properties but you are using a Driver Adapter via prisma.config.ts:
${foundProperties.map((property) => `- ${property}`).join("\n")}

The values from your schema will NOT be used!

We recommend you to remove those properties from your schema to avoid confusion if you are only using driver adapters.
`
    );
  }
}
