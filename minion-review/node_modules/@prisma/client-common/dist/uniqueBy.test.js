"use strict";
var import_vitest = require("vitest");
var import_uniqueBy = require("./uniqueBy");
(0, import_vitest.describe)("uniqueBy", () => {
  (0, import_vitest.it)("should return an empty array when given an empty array", () => {
    (0, import_vitest.expect)((0, import_uniqueBy.uniqueBy)([], (item) => item)).toEqual([]);
  });
  (0, import_vitest.it)("should return unique elements based on the hash function", () => {
    const input = [1, 2, 3, 2, 1];
    const result = (0, import_uniqueBy.uniqueBy)(input, (item) => item.toString());
    (0, import_vitest.expect)(result).toEqual([1, 2, 3]);
  });
  (0, import_vitest.it)("should work with objects using custom hash functions", () => {
    const input = [
      { id: 1, name: "Alice" },
      { id: 2, name: "Bob" },
      { id: 1, name: "Charlie" },
      // Duplicate id
      { id: 3, name: "Dave" }
    ];
    const result = (0, import_uniqueBy.uniqueBy)(input, (item) => item.id.toString());
    (0, import_vitest.expect)(result).toEqual([
      { id: 1, name: "Alice" },
      { id: 2, name: "Bob" },
      { id: 3, name: "Dave" }
    ]);
  });
  (0, import_vitest.it)("should handle string inputs", () => {
    const input = ["a", "b", "a", "c", "b"];
    const result = (0, import_uniqueBy.uniqueBy)(input, (item) => item);
    (0, import_vitest.expect)(result).toEqual(["a", "b", "c"]);
  });
  (0, import_vitest.it)("should work with more complex hash functions", () => {
    const input = [
      { firstName: "John", lastName: "Doe" },
      { firstName: "Jane", lastName: "Doe" },
      { firstName: "John", lastName: "Smith" },
      { firstName: "John", lastName: "Doe" }
      // Duplicate
    ];
    const result = (0, import_uniqueBy.uniqueBy)(input, (item) => `${item.firstName}-${item.lastName}`);
    (0, import_vitest.expect)(result).toEqual([
      { firstName: "John", lastName: "Doe" },
      { firstName: "Jane", lastName: "Doe" },
      { firstName: "John", lastName: "Smith" }
    ]);
  });
  (0, import_vitest.it)("should preserve the first occurrence when duplicates exist", () => {
    const input = [
      { id: 1, value: "first" },
      { id: 2, value: "second" },
      { id: 1, value: "duplicate" }
    ];
    const result = (0, import_uniqueBy.uniqueBy)(input, (item) => item.id.toString());
    (0, import_vitest.expect)(result).toEqual([
      { id: 1, value: "first" },
      { id: 2, value: "second" }
    ]);
    (0, import_vitest.expect)(result[0].value).toBe("first");
  });
});
