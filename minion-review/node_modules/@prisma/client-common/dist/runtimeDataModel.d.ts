import type * as DMMF from '@prisma/dmmf';
export type RuntimeModel = Omit<DMMF.Model, 'name'>;
export type RuntimeEnum = Omit<DMMF.DatamodelEnum, 'name'>;
export type RuntimeDataModel = {
    readonly models: Record<string, RuntimeModel>;
    readonly enums: Record<string, RuntimeEnum>;
    readonly types: Record<string, RuntimeModel>;
};
export type PrunedRuntimeModel = {
    readonly dbName: RuntimeModel['dbName'];
    readonly fields: Pick<RuntimeModel['fields'][number], 'name' | 'kind' | 'type' | 'relationName' | 'dbName'>[];
};
export type PrunedRuntimeDataModel = {
    readonly models: Record<string, PrunedRuntimeModel>;
    readonly enums: {};
    readonly types: {};
};
export declare function dmmfToRuntimeDataModel(dmmfDataModel: DMMF.Datamodel): RuntimeDataModel;
/**
 * Minimal version of the runtime datamodel for the Client to work
 * @param runtimeDataModel
 * @returns
 */
export declare function pruneRuntimeDataModel({ models }: RuntimeDataModel): {
    models: Record<string, PrunedRuntimeModel>;
    enums: {};
    types: {};
};
