"use strict";
var import_vitest = require("vitest");
var import_Cache = require("./Cache");
(0, import_vitest.test)("creating an item", () => {
  const cache = new import_Cache.Cache();
  const result = cache.getOrCreate("foo", () => "hello!");
  (0, import_vitest.expect)(result).toBe("hello!");
});
(0, import_vitest.test)("retrieving an item", () => {
  const cache = new import_Cache.Cache();
  const result1 = cache.getOrCreate("foo", () => ({ value: "hello!" }));
  const result2 = cache.getOrCreate("foo", () => ({ value: "hello!" }));
  (0, import_vitest.expect)(result2).toBe(result1);
});
(0, import_vitest.test)("creating items with different keys", () => {
  const cache = new import_Cache.Cache();
  const result1 = cache.getOrCreate("foo", () => ({ value: "hello!" }));
  const result2 = cache.getOrCreate("bar", () => ({ value: "hello!" }));
  (0, import_vitest.expect)(result2).not.toBe(result1);
});
(0, import_vitest.test)("retrieving an does not trigger callback", () => {
  const callback = import_vitest.vi.fn().mockReturnValue("hello!");
  const cache = new import_Cache.Cache();
  cache.getOrCreate("foo", callback);
  cache.getOrCreate("foo", callback);
  (0, import_vitest.expect)(callback).toHaveBeenCalledTimes(1);
});
(0, import_vitest.test)("it is possible to store undefined values", () => {
  const callback = import_vitest.vi.fn().mockReturnValue(void 0);
  const cache = new import_Cache.Cache();
  cache.getOrCreate("foo", callback);
  cache.getOrCreate("foo", callback);
  (0, import_vitest.expect)(callback).toHaveBeenCalledTimes(1);
});
