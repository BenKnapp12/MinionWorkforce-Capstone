/// <reference types="node" />

import type { ActiveConnectorType } from '@prisma/generator';
import type { BinaryPaths } from '@prisma/generator';
import type { DataSource } from '@prisma/generator';
import * as DMMF from '@prisma/dmmf';
import { EnvPaths } from '@prisma/internals';
import { Generator as Generator_2 } from '@prisma/generator';
import { GeneratorConfig } from '@prisma/generator';
import { GeneratorManifest } from '@prisma/generator';
import { GeneratorOptions } from '@prisma/generator';
import type { GetDMMFOptions } from '@prisma/internals';
import type { SqlQueryOutput } from '@prisma/generator';

declare const expectedGeneratedFileExtensions: readonly ["ts", "mts", "cts"];

declare const expectedImportFileExtensions: readonly ["", "ts", "mts", "cts", "js", "mjs", "cjs"];

/**
 * Turns type: string into type: string[] for all args in order to support union input types
 * @param document
 */
export declare function externalToInternalDmmf(document: DMMF.Document): DMMF.Document;

export declare function generateClient(options: GenerateClientOptions): Promise<void>;

export declare interface GenerateClientOptions {
    datamodel: string;
    schemaPath: string;
    /** Runtime path used in runtime/type imports */
    runtimeBase: string;
    outputDir: string;
    generator: GeneratorConfig;
    dmmf: DMMF.Document;
    datasources: DataSource[];
    binaryPaths: BinaryPaths;
    engineVersion: string;
    clientVersion: string;
    activeProvider: ActiveConnectorType;
    envPaths?: EnvPaths;
    /** When --postinstall is passed via CLI */
    postinstall?: boolean;
    /** False when --no-engine is passed via CLI */
    copyEngine?: boolean;
    typedSql?: SqlQueryOutput[];
    target: RuntimeTargetInternal;
    generatedFileExtension: GeneratedFileExtension;
    importFileExtension: ImportFileExtension;
    moduleFormat: ModuleFormat;
    /** Include a "@ts-nocheck" comment at the top of all generated TS files */
    tsNoCheckPreamble: Boolean;
}

declare type GeneratedFileExtension = (typeof expectedGeneratedFileExtensions)[number] | (string & {});

export declare function getDMMF(options: GetDMMFOptions): Promise<DMMF.Document>;

declare type ImportFileExtension = (typeof expectedImportFileExtensions)[number] | (string & {});

declare type ModuleFormat = (typeof moduleFormats)[number];

declare const moduleFormats: readonly ["esm", "cjs"];

export declare class PrismaClientTsGenerator implements Generator_2 {
    readonly name = "prisma-client-ts";
    getManifest(config: GeneratorConfig): Promise<GeneratorManifest>;
    generate(options: GeneratorOptions): Promise<void>;
}

/**
 * The internal representation of the `runtime` attribute for the `prisma-client` generator.
 */
declare type RuntimeTargetInternal = (typeof supportedInternalRuntimes)[number];

declare const supportedInternalRuntimes: readonly ["nodejs", "workerd", "vercel-edge", "deno", "react-native"];

export { }
