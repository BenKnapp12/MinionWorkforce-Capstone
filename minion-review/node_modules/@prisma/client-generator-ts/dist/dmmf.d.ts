import { type Dictionary } from '@prisma/client-common';
import type * as DMMF from '@prisma/dmmf';
type NamespacedTypeMap<T> = {
    prisma: Record<string, T>;
    model: Record<string, T>;
};
export declare class DMMFHelper implements DMMF.Document {
    document: DMMF.Document;
    private _compositeNames?;
    private _inputTypesByName?;
    private _typeAndModelMap?;
    private _mappingsMap?;
    private _outputTypeMap?;
    private _rootFieldMap?;
    constructor(document: DMMF.Document);
    private get compositeNames();
    private get inputTypesByName();
    get typeAndModelMap(): Dictionary<DMMF.Model>;
    get mappingsMap(): Dictionary<DMMF.ModelMapping>;
    get outputTypeMap(): NamespacedTypeMap<DMMF.OutputType>;
    get rootFieldMap(): Dictionary<DMMF.SchemaField>;
    get datamodel(): DMMF.Datamodel;
    get mappings(): DMMF.Mappings;
    get schema(): DMMF.Schema;
    get inputObjectTypes(): DMMF.Schema['inputObjectTypes'];
    get outputObjectTypes(): DMMF.Schema['outputObjectTypes'];
    isComposite(modelOrTypeName: string): boolean;
    getOtherOperationNames(): string[];
    hasEnumInNamespace(enumName: string, namespace: DMMF.FieldNamespace): boolean;
    resolveInputObjectType(ref: DMMF.InputTypeRef): DMMF.InputType | undefined;
    resolveOutputObjectType(ref: DMMF.OutputTypeRef): DMMF.OutputType | undefined;
    private buildModelMap;
    private buildTypeMap;
    private buildTypeModelMap;
    private buildMappingsMap;
    private buildMergedOutputTypeMap;
    private buildRootFieldMap;
    private buildInputTypesMap;
}
export {};
