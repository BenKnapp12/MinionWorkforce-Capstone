import { type Context, type Span, type SpanOptions } from '@opentelemetry/api';
import type { SqlQuery } from '@prisma/driver-adapter-utils';
import { QueryEvent } from './events';
import type { SchemaProvider } from './schema';
export type SpanCallback<R> = (span?: Span, context?: Context) => R;
export type ExtendedSpanOptions = SpanOptions & {
    name: string;
};
export interface TracingHelper {
    runInChildSpan<R>(nameOrOptions: string | ExtendedSpanOptions, callback: SpanCallback<R>): R;
}
export declare const noopTracingHelper: TracingHelper;
export declare function providerToOtelSystem(provider: SchemaProvider): string;
export declare function withQuerySpanAndEvent<T>({ query, tracingHelper, provider, onQuery, execute, }: {
    query: SqlQuery;
    tracingHelper: TracingHelper;
    provider: SchemaProvider;
    onQuery?: (event: QueryEvent) => void;
    execute: () => Promise<T>;
}): Promise<T>;
