import { ConnectionInfo, SqlQueryable, SqlResultSet } from '@prisma/driver-adapter-utils';
import { QueryEvent } from '../events';
import { QueryPlanNode } from '../query-plan';
import { type SchemaProvider } from '../schema';
import { type TracingHelper } from '../tracing';
import { type TransactionManager } from '../transaction-manager/transaction-manager';
import { Value } from './scope';
export type QueryInterpreterTransactionManager = {
    enabled: true;
    manager: TransactionManager;
} | {
    enabled: false;
};
export type QueryInterpreterOptions = {
    transactionManager: QueryInterpreterTransactionManager;
    placeholderValues: Record<string, unknown>;
    onQuery?: (event: QueryEvent) => void;
    tracingHelper: TracingHelper;
    serializer: (results: SqlResultSet) => Value;
    rawSerializer?: (results: SqlResultSet) => Value;
    provider?: SchemaProvider;
    connectionInfo?: ConnectionInfo;
};
export declare class QueryInterpreter {
    #private;
    constructor({ transactionManager, placeholderValues, onQuery, tracingHelper, serializer, rawSerializer, provider, connectionInfo, }: QueryInterpreterOptions);
    static forSql(options: {
        transactionManager: QueryInterpreterTransactionManager;
        placeholderValues: Record<string, unknown>;
        onQuery?: (event: QueryEvent) => void;
        tracingHelper: TracingHelper;
        provider?: SchemaProvider;
        connectionInfo?: ConnectionInfo;
    }): QueryInterpreter;
    run(queryPlan: QueryPlanNode, queryable: SqlQueryable): Promise<unknown>;
    private interpretNode;
}
