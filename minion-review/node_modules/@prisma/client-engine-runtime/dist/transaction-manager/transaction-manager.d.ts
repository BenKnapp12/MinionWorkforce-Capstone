import { SqlDriverAdapter, Transaction } from '@prisma/driver-adapter-utils';
import { QueryEvent } from '../events';
import type { SchemaProvider } from '../schema';
import { TracingHelper } from '../tracing';
import { Options, TransactionInfo } from './transaction';
export declare class TransactionManager {
    #private;
    private transactions;
    private closedTransactions;
    private readonly driverAdapter;
    private readonly transactionOptions;
    private readonly tracingHelper;
    constructor({ driverAdapter, transactionOptions, tracingHelper, onQuery, provider, }: {
        driverAdapter: SqlDriverAdapter;
        transactionOptions: Options;
        tracingHelper: TracingHelper;
        onQuery?: (event: QueryEvent) => void;
        provider?: SchemaProvider;
    });
    startTransaction(options?: Options): Promise<TransactionInfo>;
    commitTransaction(transactionId: string): Promise<void>;
    rollbackTransaction(transactionId: string): Promise<void>;
    getTransaction(txInfo: TransactionInfo, operation: string): Promise<Transaction>;
    cancelAllTransactions(): Promise<void>;
}
